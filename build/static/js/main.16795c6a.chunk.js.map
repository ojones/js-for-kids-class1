{"version":3,"sources":["logo.svg","components/steps.js","App.js","index.js","registerServiceWorker.js"],"names":["module","exports","__webpack_require__","p","Steps","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","steps","index","button","_this2","react_default","a","createElement","className","Button","bsStyle","bsSize","onClick","event","setState","Component","App","src","logo","alt","ReactDOM","render","src_App_0","document","getElementById","navigator","window","addEventListener","swUrl","concat","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QCoCzBC,cA/Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,CACL,QACA,QACA,QACA,QACA,SAEFC,MAAO,EACPC,OAAQ,QAZOV,wEAgBV,IAAAW,EAAAR,KACL,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaZ,KAAKI,MAAMC,MAAML,KAAKI,MAAME,QACxDG,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,QAAQ,UACRC,OAAO,QACPC,QAAS,SAAAC,GAAK,OAAIT,EAAKU,SAAS,CAAEZ,MAAOE,EAAKJ,MAAME,MAAQ,MAC1DN,KAAKI,MAAMG,gBAzBLY,aCmBLC,mLAfX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMV,UAAU,WAAWW,IAAI,SACzCd,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,6EAGAH,EAAAC,EAAAC,cAACN,EAAD,cAXUc,kCCElBK,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SCGF,kBAAmBC,WAC9DC,OAAOC,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAMC,sBAAN,sBACXL,UAAUM,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACfyB,UAAUM,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA","file":"static/js/main.16795c6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n\n\nclass Steps extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      steps: [\n        'step1',\n        'step2',\n        'step3',\n        'step4',\n        'step5',\n      ],\n      index: 0,\n      button: 'next'\n   };\n  }\n\n  render() {\n      return (\n        <div>\n          <div className=\"step-text\">{this.state.steps[this.state.index]}</div>\n          <Button\n            bsStyle=\"success\"\n            bsSize=\"large\"\n            onClick={event => this.setState({ index: this.state.index + 1 })}>\n            { this.state.button }\n          </Button>\n        </div>\n      );\n  }\n}\n\nexport default Steps;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Steps from './components/steps';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Algorithms</h2>\n        </div>\n        <p className=\"App-intro\">\n          Follow the algorithm steps for a delicous Peanut Butter &amp; Jelly Sandwich.\n        </p>\n        <Steps />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}